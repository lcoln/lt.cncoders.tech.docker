version: "3"
networks:
  my-network:
    driver: bridge
  
services:               

### services缩进2格 ##############

### mysql ##############
  mysql:
    build:              # 定义需要构建的内容
      context: ./mysql  # 选取 nginx 文件夹
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/mysql-log:/var/log/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=qwer0987
      - MYSQL_USER=lt   #创建test用户
      - MYSQL_PASSWORD=20201210  #设置test用户的密码
    ports:
      - 3308:3306
    # restart: always
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password
### redis #################
  redis:
    build:              # 定义需要构建的内容
      context: ./redis  # 选取 nginx 文件夹
    ports:
      - 6379:6379
### nginx #################
  nginx:                # nginx 容器 这里的名字可以当做变量使用
    build:              # 定义需要构建的内容
      context: ./nginx  # 选取 nginx 文件夹
    ports:              # 映射端口
      -  30002:80          # 宿主机:容器
      -  8081:443
    volumes:            # 挂载文件夹，配置我们可以写在宿主机，然后挂载进去
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/cert:/etc/nginx/cert
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    restart: always     # 服务挂了的时候始终自动重启
    depends_on:         # 定义容器启动顺序 附带容器间的依赖关系
      # - test
      - nodejs
    networks:           # 使用我们上面定义的网络
      - my-network

### test ##############
  # test:
  #   build: 
  #     context: ./test   # 构建 node 目录 他会去 node 下面寻找 Dockerfile
  #   # ports:
  #     # - 3335:3335    # 映射 7001
  #   # volumes:
  #   #   - ./test:/usr/local/app   # 项目文件映射
  #   restart: always
  #   # working_dir: /usr/local/app
  #   # command: node /app/test.js
  #   networks:
  #     - my-network
### node ##############
  nodejs:
    build:
      context: ./node   # 构建 node 目录 他会去 node 下面寻找 Dockerfile
    ports:
      - 3336:3335    # 映射 7001
    restart: always
    networks:
      - my-network